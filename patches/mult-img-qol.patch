{
    "changes":  [
                    {
                        "path":  "game.lua",
                        "content":  "",
                        "type":  "Modified"
                    },
                    {
                        "path":  "info.lua",
                        "content":  "",
                        "type":  "Modified"
                    },
                    {
                        "path":  "menu.lua",
                        "content":  "",
                        "type":  "Modified"
                    }
                ],
    "metadata":  {
                     "author":  "Watanoge",
                     "name":  "mult-img-qol",
                     "target_game":  "Catacombs of Solaris Revisited",
                     "description":  "Multiple image selection feature, and QOL updates (better control support, better about menu)",
                     "created":  "2025-08-08 14:08:06",
                     "version":  "1.0"
                 }
}
